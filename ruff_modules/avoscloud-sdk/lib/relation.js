"use strict";var _=require("underscore");module.exports=function(e){e.Relation=function(e,t){if(!_.isString(t))throw new TypeError("key must be a string");this.parent=e,this.key=t,this.targetClassName=null},e.Relation.reverseQuery=function(t,r,a){var s=new e.Query(t);return s.equalTo(r,a._toPointer()),s},e.Relation.prototype={_ensureParentAndKey:function(e,t){if(this.parent=this.parent||e,this.key=this.key||t,this.parent!==e)throw"Internal Error. Relation retrieved from two different Objects.";if(this.key!==t)throw"Internal Error. Relation retrieved from two different keys."},add:function(t){_.isArray(t)||(t=[t]);var r=new e.Op.Relation(t,[]);this.parent.set(this.key,r),this.targetClassName=r._targetClassName},remove:function(t){_.isArray(t)||(t=[t]);var r=new e.Op.Relation([],t);this.parent.set(this.key,r),this.targetClassName=r._targetClassName},toJSON:function(){return{__type:"Relation",className:this.targetClassName}},query:function t(){var r,t;return this.targetClassName?(r=e.Object._getSubclass(this.targetClassName),t=new e.Query(r)):(r=e.Object._getSubclass(this.parent.className),t=new e.Query(r),t._extraOptions.redirectClassNameForKey=this.key),t._addCondition("$relatedTo","object",this.parent._toPointer()),t._addCondition("$relatedTo","key",this.key),t}}};